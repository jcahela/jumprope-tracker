import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import Header from '../components/Header';
import Timer from '../components/Timer';
import RoundCount from '@/components/RoundCount';
import React, { useState, useEffect } from 'react';

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const [ isRunning, setIsRunning ] = useState(false);
  const [ round, setRound ] = useState(0);
  const [ count, setCount ] = useState(20);
  const [ isJumping, setIsJumping ] = useState(true);
  const [ countDown, setCountDown ] = useState(5);
  const [ isCountingDown, setIsCountingDown ] = useState(true);

  const beginTraining = (e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    if (isCountingDown) {
      // Set a timeout to count from 5 to 0, then set isRunning after the timeout is over
    } else {
      isRunning ? setIsRunning(false) : setIsRunning(true);
    }
  }

  useEffect(() => {
    let interval: NodeJS.Timeout | undefined;

    function startCount() {
      setCount((prev) => {
        if (isJumping && prev === 0) {
          setRound((prev) => prev + 1);
          setIsJumping(false);
          return 10;
        }
        if (!isJumping && prev === 0) {
          setIsJumping(true);
          return 20;
        }
        return prev - 1;
      });
    }

    if (isRunning) {
      interval = setInterval(startCount, 1000);
    }

    return () => {
      clearInterval(interval);
    }
  }, [isRunning, isJumping]);

  return (
    <>
      <Head>
        <title>Jumprope Tracker</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <Header />
        <RoundCount completedRounds={ round } />
        <button className={ `${styles.patopleft2} ${styles.prettyButton}` } onClick={beginTraining}>{ isRunning ? 'Stop' : 'Start' }</button>
        { isCountingDown ? (
          <Timer type={ 'Get Ready!' } seconds={ countDown } round={ undefined }/>
        ) : (
          <Timer type={ isJumping ? 'Round' : 'Rest' } seconds={ count } round={ isJumping ? round + 1 : undefined}/>
        )}
      </main>
    </>
  )
}
